"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_graphiql_react_dist_mode_es2_js"],{

/***/ "./node_modules/@graphiql/react/dist/mode.es2.js":
/*!*******************************************************!*\
  !*** ./node_modules/@graphiql/react/dist/mode.es2.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codemirror.es.js */ "./node_modules/@graphiql/react/dist/codemirror.es.js");
/* harmony import */ var _index_es_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.es.js */ "./node_modules/@graphiql/react/dist/index.es.js");
/* harmony import */ var _onlineParser_es_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./onlineParser.es.js */ "./node_modules/@graphiql/react/dist/onlineParser.es.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index-exposed.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });






_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.C.defineMode("graphql-results", (config) => {
  const parser = (0,_onlineParser_es_js__WEBPACK_IMPORTED_MODULE_2__.o)({
    eatWhitespace: (stream) => stream.eatSpace(),
    lexRules: LexRules,
    parseRules: ParseRules,
    editorConfig: { tabSize: config.tabSize }
  });
  return {
    config,
    startState: parser.startState,
    token: parser.token,
    indent,
    electricInput: /^\s*[}\]]/,
    fold: "brace",
    closeBrackets: {
      pairs: '[]{}""',
      explode: "[]{}"
    }
  };
});
function indent(state, textAfter) {
  var _a, _b;
  const levels = state.levels;
  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);
  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);
}
__name(indent, "indent");
const LexRules = {
  Punctuation: /^\[|]|\{|\}|:|,/,
  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,
  String: /^"(?:[^"\\]|\\(?:"|\/|\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*"?/,
  Keyword: /^true|false|null/
};
const ParseRules = {
  Document: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("{"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("Entry", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("}")],
  Entry: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "def"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(":"), "Value"],
  Value(token) {
    switch (token.kind) {
      case "Number":
        return "NumberValue";
      case "String":
        return "StringValue";
      case "Punctuation":
        switch (token.value) {
          case "[":
            return "ListValue";
          case "{":
            return "ObjectValue";
        }
        return null;
      case "Keyword":
        switch (token.value) {
          case "true":
          case "false":
            return "BooleanValue";
          case "null":
            return "NullValue";
        }
        return null;
    }
  },
  NumberValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Number", "number")],
  StringValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "string")],
  BooleanValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Keyword", "builtin")],
  NullValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Keyword", "keyword")],
  ListValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("["), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("Value", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("]")],
  ObjectValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("{"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("ObjectField", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("}")],
  ObjectField: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "property"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(":"), "Value"]
};


/***/ }),

/***/ "./node_modules/@graphiql/react/dist/onlineParser.es.js":
/*!**************************************************************!*\
  !*** ./node_modules/@graphiql/react/dist/onlineParser.es.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: function() { return /* binding */ onlineParser; }
/* harmony export */ });
/* harmony import */ var _index_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.es.js */ "./node_modules/@graphiql/react/dist/index.es.js");
/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ "./node_modules/graphql/language/kinds.mjs");
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });


function onlineParser(options = {
  eatWhitespace: (stream) => stream.eatWhile(_index_es_js__WEBPACK_IMPORTED_MODULE_0__.i),
  lexRules: _index_es_js__WEBPACK_IMPORTED_MODULE_0__.L,
  parseRules: _index_es_js__WEBPACK_IMPORTED_MODULE_0__.P,
  editorConfig: {}
}) {
  return {
    startState() {
      const initialState = {
        level: 0,
        step: 0,
        name: null,
        kind: null,
        type: null,
        rule: null,
        needsSeparator: false,
        prevState: null
      };
      pushRule(options.parseRules, initialState, graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DOCUMENT);
      return initialState;
    },
    token(stream, state) {
      return getToken(stream, state, options);
    }
  };
}
__name(onlineParser, "onlineParser");
function getToken(stream, state, options) {
  var _a;
  if (state.inBlockstring) {
    if (stream.match(/.*"""/)) {
      state.inBlockstring = false;
      return "string";
    } else {
      stream.skipToEnd();
      return "string";
    }
  }
  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;
  if (state.rule && state.rule.length === 0) {
    popRule(state);
  } else if (state.needsAdvance) {
    state.needsAdvance = false;
    advanceRule(state, true);
  }
  if (stream.sol()) {
    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;
    state.indentLevel = Math.floor(stream.indentation() / tabSize);
  }
  if (eatWhitespace(stream)) {
    return "ws";
  }
  const token = lex(lexRules, stream);
  if (!token) {
    const matchedSomething = stream.match(/\S+/);
    if (!matchedSomething) {
      stream.match(/\s/);
    }
    pushRule(SpecialParseRules, state, "Invalid");
    return "invalidchar";
  }
  if (token.kind === "Comment") {
    pushRule(SpecialParseRules, state, "Comment");
    return "comment";
  }
  const backupState = assign({}, state);
  if (token.kind === "Punctuation") {
    if (/^[{([]/.test(token.value)) {
      if (state.indentLevel !== void 0) {
        state.levels = (state.levels || []).concat(state.indentLevel + 1);
      }
    } else if (/^[})\]]/.test(token.value)) {
      const levels = state.levels = (state.levels || []).slice(0, -1);
      if (state.indentLevel) {
        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {
          state.indentLevel = levels[levels.length - 1];
        }
      }
    }
  }
  while (state.rule) {
    let expected = typeof state.rule === "function" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];
    if (state.needsSeparator) {
      expected = expected === null || expected === void 0 ? void 0 : expected.separator;
    }
    if (expected) {
      if (expected.ofRule) {
        expected = expected.ofRule;
      }
      if (typeof expected === "string") {
        pushRule(parseRules, state, expected);
        continue;
      }
      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {
        if (expected.update) {
          expected.update(state, token);
        }
        if (token.kind === "Punctuation") {
          advanceRule(state, true);
        } else {
          state.needsAdvance = true;
        }
        return expected.style;
      }
    }
    unsuccessful(state);
  }
  assign(state, backupState);
  pushRule(SpecialParseRules, state, "Invalid");
  return "invalidchar";
}
__name(getToken, "getToken");
function assign(to, from) {
  const keys = Object.keys(from);
  for (let i = 0; i < keys.length; i++) {
    to[keys[i]] = from[keys[i]];
  }
  return to;
}
__name(assign, "assign");
const SpecialParseRules = {
  Invalid: [],
  Comment: []
};
function pushRule(rules, state, ruleKind) {
  if (!rules[ruleKind]) {
    throw new TypeError("Unknown rule: " + ruleKind);
  }
  state.prevState = Object.assign({}, state);
  state.kind = ruleKind;
  state.name = null;
  state.type = null;
  state.rule = rules[ruleKind];
  state.step = 0;
  state.needsSeparator = false;
}
__name(pushRule, "pushRule");
function popRule(state) {
  if (!state.prevState) {
    return;
  }
  state.kind = state.prevState.kind;
  state.name = state.prevState.name;
  state.type = state.prevState.type;
  state.rule = state.prevState.rule;
  state.step = state.prevState.step;
  state.needsSeparator = state.prevState.needsSeparator;
  state.prevState = state.prevState.prevState;
}
__name(popRule, "popRule");
function advanceRule(state, successful) {
  var _a;
  if (isList(state) && state.rule) {
    const step = state.rule[state.step];
    if (step.separator) {
      const separator = step.separator;
      state.needsSeparator = !state.needsSeparator;
      if (!state.needsSeparator && separator.ofRule) {
        return;
      }
    }
    if (successful) {
      return;
    }
  }
  state.needsSeparator = false;
  state.step++;
  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {
    popRule(state);
    if (state.rule) {
      if (isList(state)) {
        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {
          state.needsSeparator = !state.needsSeparator;
        }
      } else {
        state.needsSeparator = false;
        state.step++;
      }
    }
  }
}
__name(advanceRule, "advanceRule");
function isList(state) {
  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== "string" && state.rule[state.step];
  return step && step.isList;
}
__name(isList, "isList");
function unsuccessful(state) {
  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {
    popRule(state);
  }
  if (state.rule) {
    advanceRule(state, false);
  }
}
__name(unsuccessful, "unsuccessful");
function lex(lexRules, stream) {
  const kinds = Object.keys(lexRules);
  for (let i = 0; i < kinds.length; i++) {
    const match = stream.match(lexRules[kinds[i]]);
    if (match && match instanceof Array) {
      return { kind: kinds[i], value: match[0] };
    }
  }
}
__name(lex, "lex");



/***/ })

}]);
//# sourceMappingURL=node_modules_graphiql_react_dist_mode_es2_js.chunk.js.map